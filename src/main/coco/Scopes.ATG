/**
 *
 **/
import main.java.SemanticScope.*;
import main.java.SemanticClasses.*;

import java.util.BitSet;
import java.util.ArrayDeque;


COMPILER OpenHugs

public ProgramScope program;
ClassScope currentClass;
MethodScope currentMethod;
Block currentBlock;

ArrayDeque<IfStatement> currentIf = new ArrayDeque<>() ;
ArrayDeque<FunctionStatement>  currentfunction  = new ArrayDeque<>();
ArrayDeque<WhileStatement> currentWhile  = new ArrayDeque<>() ;
ExpressionStatement currentExpression;
AsigmentStatement currentAssignment;

String ss(){
  return ss(0);
}

String ss( int n ){
  scanner.ResetPeek(); 
  Token next = la;
  for (int i = 0; i < n ; i ++) next = scanner.Peek(); 
  return next.val;
}

boolean isFunctionCall() {
 scanner.ResetPeek(); 
 Token next = scanner.Peek();
 return  next.kind == _lpar;
} 

boolean isAsignment() {
 scanner.ResetPeek(); 
 Token next = scanner.Peek();
 return  next.kind == _asign;
}

boolean isElseClause(){
  scanner.ResetPeek();
  Token next = scanner.Peek();
  return  next.kind == _sino || la.kind == _sino ;
}

/*-------------------------------------------------------------------------*/

CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  upper         = 'A' .. 'Z'.
  lower         = 'a' .. 'z'.
  digit         = '0' .. '9'.
  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  lineEnd = lf {{tab}lf}.
  
  variableName = lower{lower|upper}.
  
  className = upper{lower|upper}.
  
  number = digit { digit } ['.' digit { digit } ].
  
  stringLit = 
  "\"" { stringChar
       | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" )
       } 
  "\"".
  
  /*----- operators and special characters needed in LL(1) resolvers --------------*/
  comma   = ",".
  dec     = "--".
  dot     = ".".
  inc     = "++".
  lbrace  = "{".
  lbrack  = "[".
  lpar    = "(".
  minus   = "-".
  not     = "!".
  plus    = "+".
  rbrace  = "}".
  rbrack  = "]".
  rpar    = ")".
  tilde   = "~".
  asign = ":=".
  mul = "*".
  div = "/".
  colon = ":".
  leq = "<=".
  geq = ">=".
  less = "<".
  great = ">".
  equal = "==".
  notEq = "!=".
  and = "Y".
  or = "O".

  /*----- Reserved words ----------------------------------------------------------*/
  
  si = "SI".
  ciclo = "CICLO".
  mientras = "MIENTRAS".
  sino = "SINO".
  clase = "CLASE".
  incorporar = "INCORPORAR".
  funcion = "FUNCION".
  numero = "NUMERO".
  palabra = "PALABRA".
  returns = "RETORNA".
  return = "RETORNAR".
  bool = "LOGICO".
  true = "VERDADERO".
  false = "FALSO".


COMMENTS FROM ";" TO lf

IGNORE cr + tab

/*---------------------------------------------------------------------------*/

PRODUCTIONS

//OpenHugs = [lineEnd] {include} classDeclaration {classDeclaration} .
OpenHugs
=                                             (. program = new ProgramScope(); .)
[lineEnd]
{include}
classDeclaration
{classDeclaration} .

//completeClassName = className{ dot className} [ colon typeName {comma typeName } not ].
completeClassName
=
className{ dot className}
[ colon typeName 
{comma typeName } not 
].

//tipoRetorno = numero | bool | palabra | completeClassName .
tipoRetorno
=
numero
| bool 
| palabra 
| completeClassName
.

include
=                                             (. ; .)
incorporar
className { dot className} lineEnd .

//classDeclaration = clase className  [ colon typeName {comma typeName} ] classBlock [lineEnd] .
classDeclaration
=                                             (. currentClass = program.addClass(ss(1)); .)
clase className 
[ colon typeName {comma typeName} ] 
classBlock [lineEnd]                          (. currentClass = null; .)
.

//functionDeclaration = funcion variableName lpar [parameterList] rpar [returns tipoRetorno][lineEnd] StatementBlock.
functionDeclaration
=                                             (. currentMethod = currentClass.addMethod(ss(1)); .) funcion variableName lpar [parameterList] rpar 
[returns                                      (.currentMethod.setReturnType(ss()); .)
tipoRetorno]                                  (. currentBlock = currentMethod.getBlock(); .)
[lineEnd] 
StatementBlock                                (. currentBlock = null; .)
                                              (. currentMethod = null; .)
.

//parameterList = functionParameter {comma functionParameter} .
parameterList
= 
functionParameter 
{comma functionParameter}
.

//functionParameter = typeName variableName .
functionParameter
=                                             (. currentMethod.addParameter(ss(0),ss(1)); .)
typeName 
variableName 
.

//variableDeclaration = typeName variableName [asign expresion] .
variableDeclaration
=                                             (. if (currentMethod == null)  currentClass.addVariable(ss(0),ss(1)); else currentMethod.addVariable(ss(0),ss(1)); .)
typeName                                      (. currentAssignment = currentBlock.addAssigmentStatement(ss()); .)
variableName [asign                           (. currentExpression = currentAssignment.getExpression(); .) 
expresion                                     (. currentExpression = null; .) ] 
.

//assignment = variableName asign.
assignment
=                                             (. currentAssignment = currentBlock.addAssigmentStatement(ss()); .) 
variableName asign
                                              (. currentExpression = currentAssignment.getExpression(); .) expresion 
                                              (. currentExpression = null; .)
                                              (. currentAssignment = null; .)
.

//whileLoop = ciclo  mientras lpar .
whileLoop
=                                             (. currentWhile.push( currentBlock.addWhileStatement() ); .) 
ciclo  mientras lpar                          (. currentExpression = currentIf.peek().getCondition() ; .) expresion rpar 
                                              (. currentBlock = currentWhile.peek().getBlock(); .) StatementBlock
                                              (. currentBlock = currentWhile.peek().getParent(); .)
                                              (. currentWhile.pop(); .) 
.

//ifStatement = si lpar [IF (isElseClause()) [lineEnd] sino .
ifStatement
=                                             (. currentIf.push(currentBlock.addIfStatement()); .)
si lpar                                       (. currentExpression = currentIf.peek().getCondition() ; .) expresion rpar 
                                              (. currentBlock = currentIf.peek().getThenBlock() ; .) StatementBlock 
[IF (isElseClause()) [lineEnd] sino           (. currentBlock = currentIf.peek().getElseBlock() ; .) StatementBlock ]
                                              (. currentBlock = currentIf.peek().getParent(); .)
                                              (. currentIf.pop();; .)
.

//functionCall = variableName lpar [ expresion { comma expresion } ]  rpar .
functionCall
=                                             (. currentfunction.push( (currentExpression == null) ? currentBlock.addFunctionCall(ss()) : currentExpression.addFunctionCall(ss()) ); .)
variableName lpar [                           (. currentExpression = currentfunction.peek().addParameter() ;.) 
expresion {                                   (. currentExpression = currentfunction.peek().addParameter() ;.)
comma expresion } ]  rpar                     (. currentfunction.pop(); .)
.

//typeName = completeClassName | numero | palabra | bool.
typeName
=
completeClassName 
| numero 
| palabra 
| bool
.

//value = number | boolValue | stringLit.
value 
= 
number 
| boolValue 
| stringLit
.

//expresion = ( lpar expresion rpar | IF( isFunctionCall() ) functionCall | value | variableName (inc | dec) ] ) 	[ operator expresion ] .
expresion
=
(                                             (. currentExpression.addExpression() ; .)lpar expresion rpar (. currentExpression = currentExpression.getParent() ; .)
| IF( isFunctionCall() ) functionCall
|                                             (. currentExpression.addValue(ss()); .) 
value |                                       (. currentExpression.addVariable(ss()); .) 
variableName 
[                                             (. currentExpression.setOperator(ss()); .)
(inc | dec)
]
)
[                                             (. currentExpression.setOperator(ss()); .) 
operator                                      (. currentExpression = currentExpression.getSubExpression(); .)
expresion                                     (. currentExpression = currentExpression.getParent() ; .)
]
.

//operator = minus | plus | mul | div | leq | geq | less | great | equal | notEq . 
operator
= 
minus 
| plus 
| mul 
| div 
| leq 
| geq 
| less 
| great 
| equal 
| notEq
.

//boolValue = true | false .
boolValue
= 
true 
| false
.

//StatementBlock = lbrace [ lineEnd ]{ ( IF(isAsignment() ) assignment  | whileLoop | ifStatement | IF( isFunctionCall() ) functionCall| variableDeclaration| variableName (inc | dec)| return expresion) lineEnd } rbrace.
StatementBlock
=
lbrace 
[ lineEnd ]
{ ( IF(isAsignment() ) 
assignment  
| whileLoop 
| ifStatement 
| IF( isFunctionCall() ) functionCall
| variableDeclaration
| variableName (inc | dec)
| return expresion
) lineEnd 
} rbrace
.

//classBlock = lbrace lineEnd {(functionDeclaration | variableDeclaration) lineEnd} rbrace. 
classBlock
=
lbrace 
lineEnd { 
(functionDeclaration | variableDeclaration) 
lineEnd
} 
rbrace
. 

END OpenHugs.
