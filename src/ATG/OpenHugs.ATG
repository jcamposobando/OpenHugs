import java.util.BitSet;

//import SemanticScope.*;
import SemanticClasses.*;
import SyntacticTree.*
import src.*;

COMPILER OpenHugs

Node root = new Node();
Node currentNode = root;

void debug (String str){
  //System.err.println(str);
}

boolean isFunctionCall() {
 scanner.ResetPeek(); 
 Token next = scanner.Peek();
 return  next.kind == _lpar;
} 

boolean isAsignment() {
 scanner.ResetPeek(); 
 Token next = scanner.Peek();
 return  next.kind == _asign;
}

boolean isElseClause(){
  scanner.ResetPeek();
  Token next = scanner.Peek();
  return  next.kind == _sino || la.kind == _sino ;
}

void pushNode(){
  Node newNode = new Node(scanner.pt.val, scanner.pt.kind, currentNode);
  currentNode.children.add(newNode);
  currentNode = newNode;
}

void popNode(){
  currentNode = currentNode.parent;
}

void addChildren(){
  currentNode.children.add(new Node(scanner.pt.val, scanner.pt.kind, currentNode));
}

/*-------------------------------------------------------------------------*/

CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  upper         = 'A' .. 'Z'.
  lower         = 'a' .. 'z'.

  digit         = "0123456789".
  letter        = upper + lower + '_' + '$'.

  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  
  lineEnd = lf {{tab}lf}.
  
  variableName = lower{lower}.
  
  className = upper{lower}.
  
  number = digit { digit } ['.' digit { digit } ].
  
  stringLit = 
  "\"" { stringChar
       | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" )
       } 
  "\"".
  
  /*----- operators and special characters needed in LL(1) resolvers --------------*/
  comma   = ",".
  dec     = "--".
  dot     = ".".
  inc     = "++".
  lbrace  = "{".
  lbrack  = "[".
  lpar    = "(".
  minus   = "-".
  not     = "!".
  plus    = "+".
  rbrace  = "}".
  rbrack  = "]".
  rpar    = ")".
  tilde   = "~".
  asign = ":=".
  mul = "*".
  div = "/".
  colon = ":".
  leq = "<=".
  geq = ">=".
  less = "<".
  great = ">".
  equal = "==".
  notEq = "!=".

  /*----- Reserved words ----------------------------------------------------------*/
  
  si = "SI".
  ciclo = "CICLO".
  mientras = "MIENTRAS".
  sino = "SINO".
  clase = "CLASE".
  incorporar = "INCORPORAR".
  funcion = "FUNCION".
  numero = "NUMERO".
  palabra = "PALABRA".
  returns = "RETORNA".
  return = "RETORNAR".
  bool = "LOGICO".
  true = "VERDADERO".
  false = "FALSO".
  


COMMENTS FROM ";;" TO ";;"
COMMENTS FROM ";" TO lf


IGNORE cr + tab

/*---------------------------------------------------------------------------*/

PRODUCTIONS

OpenHugs = [lineEnd] {include} classDeclaration {classDeclaration}
(. PrintTree.print(root); .)
.

completeClassName = className{ dot className} [ colon typeName {comma typeName } not ].

tipoRetorno = numero | bool | palabra | completeClassName.

include = incorporar className { dot className} lineEnd
(. debug("include"); .)
.

classDeclaration = clase  (. debug("Nuevo block");.) className [ colon typeName {comma typeName}] classBlock [lineEnd]
(. debug("Declaracion de una clase"); .)
.

functionDeclaration =  funcion variableName lpar [parameterList] rpar [returns tipoRetorno] [lineEnd] StatementBlock
(. debug("Declaracion de una funcion"); .)
.
parameterList = functionParameter {comma functionParameter} 
.

functionParameter = typeName variableName
.

variableDeclaration = typeName variableName [asign expresion]
(. debug("Declaracion de una variable"); .)
.

assignment = variableName asign expresion
(. debug("asignacion"); .)
.

whileLoop = ciclo (. debug("while"); .) mientras lpar expresion rpar StatementBlock.

ifStatement = si (. debug("if"); .) lpar expresion rpar StatementBlock [IF (isElseClause()) [lineEnd] sino (. debug("else"); .) StatementBlock ].

functionCall = variableName lpar [expresion { comma expresion } ]  rpar (. addChildren(); .).

typeName = completeClassName | numero | palabra | bool.

value = number | boolValue | stringLit | variableName.

expresion =
  ( lpar expresion rpar
  | IF( isFunctionCall() )functionCall
  | value 	[ minus expresion
                | plus expresion
                | mul expresion
                | div expresion
                | leq expresion
                | geq expresion
                | less expresion
                | great expresion
                | equal expresion
                | notEq expresion
                | inc
                | dec ]
 ).

boolValue = true | false .

StatementBlock = lbrace (.pushNode(); .)
                        [lineEnd] { ( IF(isAsignment()) assignment  
                                      | whileLoop 
                                      | ifStatement 
                                      | IF( isFunctionCall() ) functionCall
                                      | variableDeclaration
                                      | variableName (inc | dec)
                                      | return expresion
                                    ) lineEnd } rbrace (. popNode(); .).

classBlock =  lbrace (. pushNode(); .)
              lineEnd {(functionDeclaration | variableDeclaration) lineEnd} 
              rbrace(. popNode(); .). 

END OpenHugs.